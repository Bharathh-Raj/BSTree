package com.company;

public class BSTree {

    class node{
        int data;
        public node left,right;
        node(int data) {
            this.data=data;
            this.left=null;
            this.right=null;
        }
    }

    node root;

    public node create(int data) {
        if(root==null){
            root=new node(data);
            return root;
        }
        else {
            return new node(data);
        }
    }

    public node insert(node temp,int data) {
        if(temp==null){
            return create(data);
        }
        else{
            if (data < temp.data) {
                temp.left = insert(temp.left, data);
            } else if (data > temp.data) {
                temp.right = insert(temp.right, data);
            } else {
                return temp;
            }
        }
        return temp;
    }

    public void inorder(node temp){
        if (temp == null) {
            return;
        }
        inorder(temp.left);
        System.out.print("\t"+temp.data);
        inorder(temp.right);
    }

    public void preorder(node temp) {
        if (temp == null) {
            return;
        }
        System.out.print("\t"+temp.data);
        preorder(temp.left);
        preorder(temp.right);
    }

    public void postorder(node temp) {
        if (temp == null) {
            return;
        }
        postorder(temp.left);
        postorder(temp.right);
        System.out.print("\t"+temp.data);
    }

    public node delete(node temp, int data) {
        if (temp == null) {
            return null;
        }
        else {
            if (data < temp.data) {
                temp.left=delete(temp.left, data);
            } else if (data > temp.data) {
                temp.right=delete(temp.right, data);
            }else{
                if (temp.left == null && temp.right == null) {
                    temp=null;

                } else if (temp.left == null) {
                    temp=temp.right;
                } else if (temp.right == null) {
                    temp=temp.left;
                }
                else{
                    node tempnode = findmin(temp.right);
                    System.out.println("return data"+tempnode.data+temp.data);
                    temp.data=tempnode.data;
                    temp.right=delete(temp.right, tempnode.data);
                }
            }
        }
        return temp;
    }

    public node findmin(node temp){
        while (temp.left != null) {
            temp=temp.left;
        }
        return temp;
    }

}
